{"version":3,"sources":["Sidebar.js","App.js","serviceWorker.js","index.js","assets/menu.svg"],"names":["Sidebar","props","className","animateOut","App","useState","showSidebar","setShowSidebar","setAnimateOut","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","sidecat","display","alt","onClick","setTimeout","src","menu","style","window","screen","width","options","height","position","bottom","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"uLAceA,EAZC,SAAAC,GACd,OACE,yBAAKC,UAAW,WAAaD,EAAME,YACjC,yBAAKD,UAAU,YACb,yBAAKA,UAAU,QAAf,YACA,yBAAKA,UAAU,QAAf,cACA,yBAAKA,UAAU,QAAf,a,yBCmEOE,MAnEf,WAAgB,IAAD,EACyBC,oBAAS,GADlC,mBACNC,EADM,KACOC,EADP,OAEuBF,oBAAS,GAFhC,mBAENF,EAFM,KAEMK,EAFN,KAGPC,EAAiB,CACrBC,MAAM,EACNC,UAAU,EACVC,cAAeA,EACfC,iBAAkB,CAChBC,oBAAqB,aAOnBC,EAAU,CACdC,QAAS,gBAEX,OACE,yBAAKd,UAAU,OACb,yBACEe,IAAI,GACJf,UAAU,OACVgB,QAAS,WACHZ,GACFE,GAAc,GACdW,YAAW,WACTZ,GAAe,KACd,OAEHC,GAAc,GACdD,GAAgBD,KAGpBc,IAAKC,MAENf,EAAc,kBAAC,EAAD,CAASH,WAAYA,IAAiB,KACrD,yBAAKD,UAAU,aACb,yBAAKA,UAAU,QACb,yBAAKoB,MAAOP,GACV,uCACA,uCACA,sCACA,yBAAKb,UAAU,YAAf,0BAEDqB,OAAOC,OAAOC,MAAQ,IACrB,kBAAC,IAAD,CACEH,MAAOP,EACPW,QAASjB,EACTkB,OAAQ,IACRF,MAAO,MAEP,MAELF,OAAOC,OAAOC,OAAS,IACtB,kBAAC,IAAD,CACEH,MA7CU,CAClBM,SAAU,WACVC,OAAQ,OA4CAH,QAASjB,EACTkB,OAAQ,IACRF,MAAOF,OAAOC,OAAOC,QAErB,QCzDQK,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.ed4ef899.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Sidebar = props => {\n  return (\n    <div className={\"sidebar \" + props.animateOut}>\n      <div className=\"item-ctr\">\n        <div className=\"item\">Projects</div>\n        <div className=\"item\">Experience</div>\n        <div className=\"item\">Skills</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import React from \"react\";\nimport { useState } from \"react\";\nimport \"./App.scss\";\nimport menu from \"./assets/menu.svg\";\nimport Sidebar from \"./Sidebar\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"./animations/cat.json\";\n\nfunction App() {\n  const [showSidebar, setShowSidebar] = useState(false);\n  const [animateOut, setAnimateOut] = useState(false);\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid\"\n    }\n  };\n  const lottieStyle = {\n    position: \"absolute\",\n    bottom: \"0px\"\n  };\n  const sidecat = {\n    display: \"inline-block\"\n  };\n  return (\n    <div className=\"App\">\n      <img\n        alt=\"\"\n        className=\"menu\"\n        onClick={() => {\n          if (showSidebar) {\n            setAnimateOut(true);\n            setTimeout(() => {\n              setShowSidebar(false);\n            }, 400);\n          } else {\n            setAnimateOut(false);\n            setShowSidebar(!showSidebar);\n          }\n        }}\n        src={menu}\n      ></img>\n      {showSidebar ? <Sidebar animateOut={animateOut} /> : null}\n      <div className=\"name-logo\">\n        <div className=\"name\">\n          <div style={sidecat}>\n            <div>Nafeez</div>\n            <div>Ishmam</div>\n            <div>Ahmed</div>\n            <div className=\"subtitle\">Welcome to my website</div>\n          </div>\n          {window.screen.width > 500 ? (\n            <Lottie\n              style={sidecat}\n              options={defaultOptions}\n              height={230}\n              width={300}\n            />\n          ) : null}\n        </div>\n        {window.screen.width <= 500 ? (\n          <Lottie\n            style={lottieStyle}\n            options={defaultOptions}\n            height={200}\n            width={window.screen.width}\n          />\n        ) : null}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/menu.082e978d.svg\";"],"sourceRoot":""}